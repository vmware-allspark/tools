# Workloads are split into two groups, for single cluster there is no difference as before.
# For multicluster we can deploy the first set of workloads into first cluster and the second one into second cluster.
{{- if or (not .Values.multicluster.enabled) (.Values.multicluster.cluster1) }}
apiVersion: v1
data:
  service-graph: |
    services:
    - isEntrypoint: true
      name: {{ .Values.serviceNamePrefix }}0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-0
            size: {{ .Values.requestSize }}
        - call:
            service: {{ .Values.serviceNamePrefix }}0-1
            size: {{ .Values.requestSize }}
        - call:
            service: {{ .Values.serviceNamePrefix }}0-2
            size: {{ .Values.requestSize }}
        - call:
            service: {{ .Values.serviceNamePrefix }}0-3
            size: {{ .Values.requestSize }}
        - call:
            service: {{ .Values.serviceNamePrefix }}0-4
            size: {{ .Values.requestSize }}
        - call:
            service: {{ .Values.serviceNamePrefix }}0-5
            size: {{ .Values.requestSize }}
        - call:
            service: {{ .Values.serviceNamePrefix }}0-6
            size: {{ .Values.requestSize }}
        - call:
            service: {{ .Values.serviceNamePrefix }}0-7
            size: {{ .Values.requestSize }}
        - call:
            service: {{ .Values.serviceNamePrefix }}0-8
            size: {{ .Values.requestSize }}
        {{- if .Values.vm.enabled }}
        - call:
            service: {{ .Values.serviceNamePrefix }}0-9
            size: {{ .Values.requestSize }}
        {{- end}}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-0-0
            size: {{ .Values.requestSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-1
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-1-0
            size: {{ .Values.requestSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-2
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-2-0
            size: {{ .Values.requestSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-3
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-3-0
            size: {{ .Values.requestSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-4
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-4-0
            size: {{ .Values.requestSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-5
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-5-0
            size: {{ .Values.requestSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-6
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-6-0
            size: {{ .Values.requestSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-7
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-7-0
            size: {{ .Values.requestSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-8
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-8-0
            size: {{ .Values.requestSize }}
    {{- if .Values.vm.enabled }}
    - name: {{ .Values.serviceNamePrefix }}0-9
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
      script:
      - - call:
            service: {{ .Values.serviceNamePrefix }}0-9-0
            size: {{ .Values.requestSize }}
      type: http
    {{- end }}
    - name: {{ .Values.serviceNamePrefix }}0-0-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-1-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-2-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-3-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-4-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-5-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-6-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-7-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    - name: {{ .Values.serviceNamePrefix }}0-8-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    {{- if .Values.vm.enabled }}
    - name: {{ .Values.serviceNamePrefix }}0-9-0
      numReplicas: {{ .Values.replicas }}
      responseSize: {{ .Values.responseSize }}
      type: http
    {{- end }}
kind: ConfigMap
metadata:
  labels:
    app: service-graph
  name: service-graph-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0v1
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0v2
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0
        role: service
        version: v2
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-0
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-1
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-1
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-1
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-1
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-1
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-1
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-2
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-2
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-2
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-2
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-2
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-3
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-3
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-3
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-3
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-3
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-3
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-4
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-4
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-4
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-4
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-4
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-4
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-5
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-5
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-6
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-6
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-7
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-7
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-8
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-8
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-0-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-0-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-0-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-0-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-0-0
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-0-0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-1-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-1-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-1-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-1-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-1-0
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-1-0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-2-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-2-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-2-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-2-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-2-0
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-2-0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-3-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-3-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-3-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-3-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-3-0
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-3-0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-4-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-4-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-4-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-4-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
{{- end}}
{{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-4-0
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-4-0

{{- end}}
---
# Resources that can be put in second cluster for multicluster case
{{- if or (not .Values.multicluster.enabled) (.Values.multicluster.cluster2) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-5
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-5
  template:
    metadata:
      annotations:
        {{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
        {{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-5
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
          - name: SERVICE_NAME
            value: {{ .Values.serviceNamePrefix }}0-5
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
          - containerPort: 8080
          {{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
          {{- end}}
          {{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
          {{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
          - mountPath: /etc/config
            name: config-volume
      volumes:
        - configMap:
            items:
              - key: service-graph
                path: service-graph.yaml
            name: service-graph-config
          name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-5
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-5
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-6
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-6
  template:
    metadata:
      annotations:
        {{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
        {{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-6
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
          - name: SERVICE_NAME
            value: {{ .Values.serviceNamePrefix }}0-6
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
          - containerPort: 8080
          {{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
          {{- end}}
          {{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
          {{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
          - mountPath: /etc/config
            name: config-volume
      volumes:
      - configMap:
          items:
            - key: service-graph
              path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-6
spec:
  ports:
    - name: {{ .Values.httpPortName }}
      port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-6
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-7
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-7
  template:
    metadata:
      annotations:
          {{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
          {{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-7
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
          - name: SERVICE_NAME
            value: {{ .Values.serviceNamePrefix }}0-7
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
          - containerPort: 8080
          {{- if .Values.livenessProbe }}
        livenessProbe: {{ toJson .Values.livenessProbe }}
          {{- end}}
          {{- if .Values.readinessProbe }}
        readinessProbe: {{ toJson .Values.readinessProbe }}
          {{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
          - mountPath: /etc/config
            name: config-volume
      volumes:
      - configMap:
          items:
            - key: service-graph
              path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-7
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-7
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-8
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-8
  template:
    metadata:
      annotations:
        {{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
        {{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-8
        role: service
        version: v1
    spec:
      containers:
        - args:
          - --max-idle-connections-per-host=32
          lifecycle:
            preStop:
              exec:
                command: # Do not shut the application down immediately
                  - "sleep"
                  - "10s"
          env:
            - name: SERVICE_NAME
              value: {{ .Values.serviceNamePrefix }}0-8
          image: {{ .Values.serviceGraphImage }}
          name: mock-service
          ports:
            - containerPort: 8080
            {{- if .Values.livenessProbe }}
          livenessProbe: {{ toJson .Values.livenessProbe }}
            {{- end}}
            {{- if .Values.readinessProbe }}
          readinessProbe: {{ toJson .Values.readinessProbe }}
            {{- end}}
          resources: {{ toJson .Values.resources }}
          volumeMounts:
            - mountPath: /etc/config
              name: config-volume
      volumes:
        - configMap:
            items:
              - key: service-graph
                path: service-graph.yaml
            name: service-graph-config
          name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-8
spec:
  ports:
    - name: {{ .Values.httpPortName }}
      port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-8
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-5-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-5-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-5-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-5-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.tcpLivenessProbe }}
        livenessProbe: {{ toJson .Values.tcpLivenessProbe }}
{{- end}}
{{- if .Values.tcpReadinessProbe }}
        readinessProbe: {{ toJson .Values.tcpReadinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-5-0
spec:
  ports:
    - name: tcp-web
      port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-5-0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-6-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-6-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-6-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-6-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.tcpLivenessProbe }}
        livenessProbe: {{ toJson .Values.tcpLivenessProbe }}
{{- end}}
{{- if .Values.tcpReadinessProbe }}
        readinessProbe: {{ toJson .Values.tcpReadinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-6-0
spec:
  ports:
  - name: tcp-web
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-6-0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-7-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-7-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-7-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-7-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.tcpLivenessProbe }}
        livenessProbe: {{ toJson .Values.tcpLivenessProbe }}
{{- end}}
{{- if .Values.tcpReadinessProbe }}
        readinessProbe: {{ toJson .Values.tcpReadinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-7-0
spec:
  ports:
  - name: tcp-web
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-7-0
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-8-0
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.serviceNamePrefix }}0-8-0
  template:
    metadata:
      annotations:
{{- if .Values.prometheus_scrape }}
        prometheus.io/scrape: "true"
{{- end }}
      labels:
        app: {{ .Values.serviceNamePrefix }}0-8-0
        role: service
        version: v1
    spec:
      containers:
      - args:
        - --max-idle-connections-per-host=32
        lifecycle:
          preStop:
            exec:
              command: # Do not shut the application down immediately
                - "sleep"
                - "10s"
        env:
        - name: SERVICE_NAME
          value: {{ .Values.serviceNamePrefix }}0-8-0
        image: {{ .Values.serviceGraphImage }}
        name: mock-service
        ports:
        - containerPort: 8080
{{- if .Values.tcpLivenessProbe }}
        livenessProbe: {{ toJson .Values.tcpLivenessProbe }}
{{- end}}
{{- if .Values.tcpReadinessProbe }}
        readinessProbe: {{ toJson .Values.tcpReadinessProbe }}
{{- end}}
        resources: {{ toJson .Values.resources }}
        volumeMounts:
        - mountPath: /etc/config
          name: config-volume
      volumes:
      - configMap:
          items:
          - key: service-graph
            path: service-graph.yaml
          name: service-graph-config
        name: config-volume
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-8-0
spec:
  ports:
  - name: tcp-web
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-8-0
{{- end}}
---
{{- if .Values.vm.enabled }}
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-9
spec:
  ports:
  - name: {{ .Values.httpPortName }}
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-9
---
apiVersion: networking.istio.io/v1alpha3
kind: WorkloadGroup
metadata:
  name: {{ .Values.serviceNamePrefix }}0-9
spec:
  metadata:
    labels:
      app:  {{ .Values.serviceNamePrefix }}0-9
  template: {}
  {{- if .Values.readinessProbe }}
  probe:
    {{ toJson .Values.readinessProbe }}
  {{- end}}
---
apiVersion: networking.istio.io/v1alpha3
kind: WorkloadGroup
metadata:
  name: {{ .Values.serviceNamePrefix }}0-9-0
spec:
  metadata:
    labels:
      app:  {{ .Values.serviceNamePrefix }}0-9-0
  template: {}
  {{- if .Values.readinessProbe }}
  probe:
    {{ toJson .Values.readinessProbe }}
  {{- end}}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: service-graph
  name: {{ .Values.serviceNamePrefix }}0-9-0
spec:
  ports:
  - name: tcp-web
    port: 8080
  selector:
    app: {{ .Values.serviceNamePrefix }}0-9-0
{{- end }}
